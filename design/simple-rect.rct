// Example ReCT mockup
// If you know how ReCT works, it should be decodable.
// Any new ideas will be documented.

// This doesn't do *everything*, only the main parts

package sys;

// Optionally, pointers could be a generic type.
// You'd have to do a compile-time linking to the c stdlib in order to resolve this extern
extern void* malloc(long size);

class MyType {
	set somePublicVariable -> int;
	var somePrivateVariable <- "my_string";
	
	set Constructor() {
		// Do constructor magic
	}

	var Constructor(private bool) {
		// This can only be called within the MyType class
	}

	static set MakeSpecial() -> MyType{
		// Public static, basically set => static, var => private/scope-specific

		// We make instances of stuff with make.
		// We can also return null or nil if we wish.
		return make MyType(true);
	}
}

// BOOM, we're reduced to fixed-size statements!
// Luckily strings are scope-specific char pointers, and thus are just an int/long.
// The support of strings in structs can be debated tho.
struct MyStruct {
	// This looks funny but hey
	var someLocalString -> string <- "Hello, World!";

	// This is not allowed, since MyType is not a value type.
	// Look up "unmanaged" in C#, this is basically that.

	// set typeInstance -> MyType;

	// Arrays are dynamic-size and thus disallowed, but we could add fixed-size ones
	set someData -> int[32];
}

// TODO: Generics
// TODO: Enums

// Anything else just copy whats on the ReCT docs
